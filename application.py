def errorchecker_campaign(entrada):
    check = entrada.split('_')
    if len(check)==10:
        l={}
        for k,v in enumerate(check):
            salida = True if v in d[p[k]] else (True if p[k] in ['Invoice/EstimateNumber','FlexField'] else f'Error please check "{v}" in the taxonomy tool')
            l.update({p[k]:salida})
            
            correct = 'Correct' if str(l) ==  "{'CalendarYear': True, 'Quarter': True, 'BuyingTeam': True, 'Brand': True, 'DemoTargeting': True, 'FunnelStage': True, 'PlatformKPI': True, 'Program': True, 'Invoice/EstimateNumber': True, 'FlexField': True}" else {k:val for k, val in l.items() if val!=True}
        return(correct)
    elif len(check)<10:
        return('Required Fields are missing')
    elif len(check)>10:
        return('There are more fields than required, please check the number of fields in the taxonomy')

def errorchecker_creative(entrada):
    check = entrada.split('_')
    if len(check) == 11:
        l={}
        for k,v in enumerate(check):
            salida = True if v in c[e[k]] else (True if e[k] in ['CreativeName'] else f'Error please check "{v}" in the taxonomy tool')
            l.update({e[k]:salida})
            correct = 'Correct' if str(l) ==  "{'CalendarYear': True, 'Product': True, 'MediaFormatCreative': True, 'Dimensions/AdSize': True, 'CreativeCampaign': True, 'CreativeName': True, 'Language': True, 'Subtitles': True, 'CampaignType': True, 'Program': True, 'Local': True}" else {k:val for k, val in l.items() if val!=True}
        return(correct)
    elif len(check)<11:
        return('Required Fields are missing')
    elif len(check)>11:
        return('There are more fields than required, please check the number of fields in the taxonomy')

def errorchecker_dv3(entrada):
    check = entrada.split('_')
    if len(check)==9:
        l={}
        for k,v in enumerate(check):
            salida = True if v in dv[dve[k]] else (True if dve[k] in ['AudienceName','FlexField'] else f'Error please check "{v}" in the taxonomy tool')
            l.update({dve[k]:salida})
            correct = 'Correct' if str(l) == "{'Brand': True, 'InventoryType': True, 'MediaFormat': True, 'Environment/Device': True, 'PMPChannel': True, 'Partner': True, 'AudienceSource': True, 'AudienceName': True, 'FlexField': True}" else {k:val for k, val in l.items() if val!=True}
        return(correct)
    elif len(check)<9:
        return('Required Fields are missing')
    elif len(check)>9:
        return('There are more fields than required, please check the number of fields in the taxonomy')

def errorchecker_placement(entrada):
    check = entrada.split('_')
    if len(check)==17:
        l={}
        for k,v in enumerate(check):
            salida = True if v in pla[plac[k]] else (True if plac[k] in ['AudienceName','FlexField'] else f'Error please check "{v}" in the taxonomy tool')
            l.update({plac[k]:salida})
            correct = 'Correct' if str(l) == "{'MediaChannel': True, 'InventoryType': True, 'Brand': True, 'Environment/Device': True, 'MediaFormat': True, 'Dimensions/AdSize': True, 'Partner': True, 'PMPChannel': True, 'PrimaryTargeting': True, 'AudienceSource': True, 'AudienceName': True, 'CostStructure': True, 'AdServing': True, 'DCMTags': True, 'IASTags': True, 'NielsenTags': True, 'FlexField': True}" else {k:val for k, val in l.items() if val!=True}
        return(correct)
    elif len(check)<17:
        return('Required Fields are missing')
    elif len(check)>17:
        return('There are more fields than required, please check the number of fields in the taxonomy')

p  = {0: 'CalendarYear',
 1: 'Quarter',
 2: 'BuyingTeam',
 3: 'Brand',
 4: 'DemoTargeting',
 5: 'FunnelStage',
 6: 'PlatformKPI',
 7: 'Program',
 8: 'Invoice/EstimateNumber',
 9: 'FlexField'}

d = {'CalendarYear': ['18', '19', '20', '21', '22'],
 'Quarter': ['Q1Q3',
  'AOEG',
  'Q1JM',
  'Q2AJ',
  'Q2Q3',
  'Q2Q4',
  'Q3JS',
  'Q3Q4',
  'Q4OD'],
 'BuyingTeam': ['AUD', 'BID', 'ECM', 'FEP', 'FST', 'SCT', 'DIG'],
 'Brand': ['AOD', 'BEV', 'DOG', 'SAM', 'TRU', 'TWT', 'WDL'],
 'DemoTargeting': ['AD21+',
  'AD25+',
  'A2534',
  'A2544',
  'A2549',
  'A2554',
  'H2534',
  'H2549',
  'M2534',
  'M2549',
  'M2554',
  'W2534',
  'W2549',
  'W2554'],
 'FunnelStage': ['1', '3', '4', '2'],
 'PlatformKPI': ['15V',
  '6VW',
  'ATC',
  'APD',
  'CVR',
  'ENG',
  'EAR',
  'GRP',
  'IMP',
  'LPV',
  'LDG',
  'LKC',
  'PCH',
  'RCH',
  'SOV',
  'SHR',
  'SUP',
  'VDC',
  'VVW',
  'VEW'],
 'Program': ['AOALW',
  'AODFT',
  'GDCUP',
  'BEVAO',
  'JSBER',
  'TRLDA',
  'NHLSP',
  'SAMAO',
  'TISGD',
  'TRUAO',
  'TRUCA',
  'TRLDA',
  'TLVNA',
  'TRMNF',
  'TRPSW',
  'TRSNF',
  'TWTAL',
  'TWTFB',
  'TWLDA',
  'TWTTG'],
 'Invoice/EstimateNumber': [],
 'FlexField': []}

## Creative

c = {'CalendarYear': ['18', '19', '20', '21', '22'],
 'Product': ['AODCA',
  'AODEA',
  'AODFF',
  'AODGR',
  'AODPC',
  'AODRO',
  'AODUF',
  'AODVP',
  'DFH60',
  'DFHCC',
  'DFHGR',
  'DFHHO',
  'DFHSQ',
  'DFHSM',
  'SAMOC',
  'SAM76',
  'SAMBL',
  'SAMCS',
  'SAMJH',
  'SAMLO',
  'SAMNE',
  'SAMWE',
  'SAMWH',
  'SAMGR',
  'SAMSM',
  'SAMWL',
  'TRUBP',
  'TRUCP',
  'TRUEX',
  'TRUGR',
  'TRULM',
  'TRULP',
  'TRUPU',
  'TRUTE',
  'TRUWL',
  'TWTHH',
  'TWTOR',
  'WDLBT',
  'WDLGT',
  'WDLVP'],
 'MediaFormatCreative': ['EVT',
  'GIF',
  'FBI',
  'FCN',
  'FBV',
  'HTK',
  'RTV',
  'TWV'],
 'Dimensions/AdSize': [':10',
  '1:6',
  '192',
  '12X',
  '162',
  '122',
  '126',
  '120',
  '2:2',
  '128',
  ':13',
  ':14',
  '14X',
  ':15',
  '16X',
  '160',
  '168',
  ':17',
  '3:0',
  '180',
  ':02',
  ':20',
  '200',
  '21x',
  '216',
  ':22',
  '234',
  ':24',
  '250',
  ':30',
  '105',
  '300',
  '305',
  '306',
  '600',
  '301',
  '323',
  '324',
  '320',
  '336',
  '375',
  ':04',
  '400',
  ':44',
  ':45',
  '468',
  ':05',
  ':50',
  '500',
  ':55',
  ':06',
  ':60',
  '613',
  '630',
  '264',
  '640',
  ':07',
  ':07',
  '723',
  '728',
  ':75',
  '762',
  '768',
  '769',
  '800',
  ':09',
  ':90',
  '964',
  '975',
  '976',
  '970',
  'CUS',
  'PKG',
  'SDK',
  'SSU',
  'TXT',
  'WRP',
  'POV'],
 'CreativeCampaign': ['ANG',
  'EMN',
  'FRT',
  'KIT',
  'LVN',
  'NOI',
  'PRD',
  'SWT',
  'TDR',
  'TTS',
  'YCF'],
 'CreativeName': [],
 'Language': ['E', 'S'],
 'Subtitles': ['YST', 'NST'],
 'CampaignType': ['AO', 'BC', 'DM', 'DE', 'EC', 'MS', 'SM', 'SS', 'TS'],
 'Program': ['AOALW',
  'AODFT',
  'GDCUP',
  'BEVAO',
  'JSBER',
  'TRLDA',
  'NHLSP',
  'SAMAO',
  'TISGD',
  'TRUAO',
  'TRUCA',
  'TRLDA',
  'TLVNA',
  'TRMNF',
  'TRPSW',
  'TRSNF',
  'TWTAL',
  'TWTFB',
  'TWLDA',
  'TWTTG'],
 'Local': ['L', 'N']}

e ={0: 'CalendarYear',
 1: 'Product',
 2: 'MediaFormatCreative',
 3: 'Dimensions/AdSize',
 4: 'CreativeCampaign',
 5: 'CreativeName',
 6: 'Language',
 7: 'Subtitles',
 8: 'CampaignType',
 9: 'Program',
 10: 'Local'}

## DV360

dv = {'Brand': ['AOD', 'BEV', 'DOG', 'SAM', 'TRU', 'TWT', 'WDL'],
 'InventoryType': ['BRS', 'DIR', 'FEE', 'OPX', 'PMP', 'PRG'],
 'MediaFormat': ['AFL',
  'ART',
  'BAN',
  'BSY',
  'CEC',
  'CHF',
  'CIB',
  'CIV',
  'CMB',
  'CUS',
  'CVR',
  'EML',
  'EVT',
  'FBP',
  'FCC',
  'FCN',
  'FCS',
  'FFS',
  'FFV',
  'FIV',
  'FPL',
  'FSM',
  'FSS',
  'FSV',
  'FVM',
  'GIF',
  'HGG',
  'HPT',
  'IGE',
  'IST',
  'LGN',
  'LOG',
  'NTV',
  'OHI',
  'OLV',
  'OVY',
  'PBP',
  'PCA',
  'PDE',
  'PIN',
  'PPC',
  'PPV',
  'PRT',
  'PST',
  'PVP',
  'PXV',
  'RBL',
  'RTA',
  'RTC',
  'RTF',
  'RTN',
  'RTO',
  'RTP',
  'RTR',
  'RTT',
  'RTV',
  'SEA',
  'SKN',
  'SNA',
  'SNC',
  'SNF',
  'SNL',
  'SNS',
  'SNT',
  'SNX',
  'SOS',
  'SOV',
  'SPS',
  'SPV',
  'TAS',
  'TCC',
  'TCS',
  'TCV',
  'TMT',
  'TPR',
  'TPT',
  'TSC',
  'TST',
  'TTR',
  'TTT',
  'TVC',
  'TXT',
  'YHF',
  'YMH',
  'YSL'],
 'Environment/Device': ['MAP', 'CND', 'CRS', 'OTT', 'DWB', 'MWB'],
 'PMPChannel': ['BEA',
  'ENT',
  'FIN',
  'FOO',
  'GAM',
  'HFI',
  'LIF',
  'LTX',
  'MUC',
  'MUS',
  'NAO',
  'NEW',
  'OTD',
  'SPO',
  'TRA'],
 'Partner': ['33ACS',
  'ABCNT',
  'ABCNW',
  'ACCUW',
  'ACTIV',
  'ADSWM',
  'AENET',
  'ALLRE',
  'AMCNT',
  'AMINC',
  'APPNX',
  'ATTNT',
  'BARST',
  'BBCAM',
  'BETNT',
  'BILLB',
  'BLEAC',
  'BLOOM',
  'BOCOM',
  'BOSTO',
  'BRAVO',
  'BUSTL',
  'BUZZF',
  'CBSSP',
  'CMTNT',
  'CNBCN',
  'CNNNT',
  'COMED',
  'COMPL',
  'CONDE',
  'CWNTW',
  'DAXNT',
  'DAZNN',
  'DELIS',
  'DISCO',
  'DISID',
  'DISNY',
  'DITRE',
  'DOTDA',
  'DOTHM',
  'DRAFT',
  'DV360',
  'ENTNT',
  'ENTRE',
  'ESPNN',
  'FACEB',
  'FACTL',
  'FLIPB',
  'FMGNT',
  'FOODN',
  'FORBE',
  'FOURS',
  'FOXHU',
  'FOXNT',
  'FOXSP',
  'FREEF',
  'FRIBE',
  'FUBOT',
  'FUNDI',
  'FXNTW',
  'GASBD',
  'GIMLE',
  'GIPHY',
  'GMAME',
  'GPYUT',
  'GUMGU',
  'HEARS',
  'HGTVN',
  'HISTO',
  'HMTSP',
  'HPBAE',
  'HPBST',
  'HULUT',
  'IFCNT',
  'IGNNT',
  'IHEAR',
  'INFAT',
  'INMKT',
  'INSTY',
  'INVER',
  'JUNGR',
  'KARGO',
  'KATZD',
  'LCLTN',
  'LIFET',
  'LIVEN',
  'LOGON',
  'MASHA',
  'MDSTK',
  'MEDRA',
  'MENSJ',
  'MERED',
  'MLBNT',
  'MLSNT',
  'MTVNT',
  'MUNCH',
  'NASCA',
  'NATIV',
  'NBCNT',
  'NBCSP',
  'NBCUN',
  'NBCUW',
  'NESNT',
  'NEWSA',
  'NHLNT',
  'NHOUS',
  'NPRNT',
  'NTWRK',
  'NYTIM',
  'OATHN',
  'ONION',
  'OUTTV',
  'OXYGE',
  'PANDO',
  'PEACK',
  'PERFO',
  'PINTE',
  'PLUTO',
  'PLYTR',
  'PMCNT',
  'POPSU',
  'PRIDE',
  'PRXNT',
  'PushS',
  'RDDIT',
  'REF29',
  'RUNWD',
  'SAMBA',
  'SAVEU',
  'SCORE',
  'SHARE',
  'SHEKN',
  'SLATE',
  'SLING',
  'SNAPC',
  'SPOTI',
  'SPRTI',
  'TARGE',
  'TASTM',
  'TASTY',
  'TBSNT',
  'TEADS',
  'TELAR',
  'TELMU',
  'THEAT',
  'THEMA',
  'THRIL',
  'TINDE',
  'TLCNT',
  'TNTNT',
  'TORRE',
  'TRADE',
  'TRIPA',
  'TRIPL',
  'TRUTV',
  'TUBIN',
  'TURNE',
  'TWITC',
  'TWITT',
  'UNDER',
  'UNITR',
  'UNIVI',
  'UNRUL',
  'UPROX',
  'USANT',
  'USATO',
  'VEVON',
  'VH1NT',
  'VIACO',
  'VICEN',
  'VINEP',
  'VOXNT',
  'WARNE',
  'WASHI',
  'WBURN',
  'WHLBN',
  'WIRED',
  'XUMON',
  'YAHON',
  'YAHOO',
  'YOUFP',
  'YOURH',
  'YOUTU'],
 'AudienceSource': ['1PAR',
  '23CM',
  '333A',
  '3BLU',
  'CACX',
  'CFAC',
  'CGRO',
  'IRIL',
  'CJUM',
  'CMIX',
  'CPIQ',
  'CSEM',
  '2FBL',
  '2FBD',
  '2FBI',
  '2FBG',
  '2FBM',
  '2FBR',
  '3FAC',
  '2GBY',
  '2GAA',
  '2GCT',
  '2GAD',
  '2GAG',
  '2GAM',
  '2GAL',
  '2GAX',
  '2GSL',
  '2GYE',
  '2GYK',
  '2GAI',
  '2GAC',
  '3HUL',
  '2HUL',
  '2IMK',
  'IRIS',
  '3IRP',
  '2JUN',
  '3LSL',
  '3NAM',
  'NADA',
  '2PAN',
  '2PNL',
  '2PER',
  '2PNI',
  '2PNK',
  '3PSP',
  '2RCO',
  '2RDD',
  '2RIN',
  '3SAB',
  '2SNI',
  '2SND',
  '2SNR',
  '2SNG',
  '2SPO',
  '2TWL',
  '2TWM',
  '2TWD',
  '2TWI',
  '2TWG',
  '2TWK',
  '2VNP',
  '3VIZ',
  '3VOX'],
 'AudienceName': [],
 'FlexField': []}

dve = {0: 'Brand',
 1: 'InventoryType',
 2: 'MediaFormat',
 3: 'Environment/Device',
 4: 'PMPChannel',
 5: 'Partner',
 6: 'AudienceSource',
 7: 'AudienceName',
 8: 'FlexField'}

## Placement name

pla = {'MediaChannel': ['AUD', 'POD', 'PRO', 'DIR', 'FEP', 'SEM', 'SOC'],
 'InventoryType': ['BRS', 'DIR', 'OPX', 'PMP', 'PRG', 'FEE'],
 'Brand': ['AOD', 'BEV', 'DOG', 'SAM', 'TRU', 'TWT', 'WDL'],
 'Environment/Device': ['MAP', 'CND', 'CRS', 'OTT', 'DWB', 'MWB'],
 'MediaFormat': ['AFL',
  'ART',
  'BSY',
  'CMB',
  'CEC',
  'CHF',
  'CUS',
  'CVR',
  'EML',
  'EVT',
  'FBP',
  'FCN',
  'FCS',
  'FCC',
  'FPL',
  'FFS',
  'FFV',
  'FIV',
  'FSS',
  'FSV',
  'FSM',
  'FVM',
  'HGG',
  'GIF',
  'HPT',
  'IGE',
  'CIB',
  'CIV',
  'LGN',
  'LOG',
  'NTV',
  'OHI',
  'OVY',
  'PBP',
  'PVP',
  'PXV',
  'PCA',
  'PPC',
  'PIN',
  'PPV',
  'PST',
  'PRT',
  'PDE',
  'RTC',
  'RTN',
  'RTV',
  'RTO',
  'RTF',
  'RTA',
  'RTR',
  'RTP',
  'RTT',
  'RBL',
  'SEA',
  'SKN',
  'SNA',
  'SNC',
  'SNX',
  'SNF',
  'SNL',
  'SNT',
  'SNS',
  'SOS',
  'SOV',
  'SPS',
  'SPV',
  'BAN',
  'IST',
  'TXT',
  'TPR',
  'TAS',
  'TCC',
  'TCS',
  'TCV',
  'TSC',
  'TMT',
  'TST',
  'TPT',
  'TTT',
  'TTR',
  'TVC',
  'OLV',
  'YHF',
  'YMH',
  'YSL'],
 'Dimensions/AdSize': [':10',
  '1:6',
  '192',
  '12X',
  '162',
  '122',
  '126',
  '120',
  '2:2',
  '128',
  ':13',
  ':14',
  '14X',
  ':15',
  '16X',
  '160',
  '168',
  ':17',
  '3:0',
  '180',
  ':02',
  ':20',
  '200',
  '21x',
  '216',
  ':22',
  '234',
  ':24',
  '250',
  ':30',
  '105',
  '300',
  '305',
  '306',
  '600',
  '301',
  '323',
  '324',
  '320',
  '336',
  '375',
  ':04',
  '400',
  ':44',
  ':45',
  '468',
  ':05',
  ':50',
  '500',
  ':55',
  ':06',
  ':60',
  '613',
  '630',
  '264',
  '640',
  ':07',
  ':07',
  '723',
  '728',
  ':75',
  '762',
  '768',
  '769',
  '800',
  ':09',
  ':90',
  '964',
  '975',
  '976',
  '970',
  'CUS',
  'PKG',
  'SDK',
  'SSU',
  'TXT',
  'WRP',
  'POV'],
 'Partner': ['33ACS',
  'AENET',
  'ABCNT',
  'ABCNW',
  'ACCUW',
  'ACTIV',
  'ADSWM',
  'ALLRE',
  'AMCNT',
  'AMINC',
  'APPNX',
  'ATTNT',
  'BARST',
  'BBCAM',
  'BETNT',
  'BILLB',
  'BLEAC',
  'BLOOM',
  'BOSTO',
  'BOCOM',
  'BRAVO',
  'BUSTL',
  'BUZZF',
  'CBSSP',
  'CMTNT',
  'CNBCN',
  'CNNNT',
  'COMED',
  'COMPL',
  'CONDE',
  'CWNTW',
  'DAXNT',
  'DAZNN',
  'DELIS',
  'DITRE',
  'DISCO',
  'DISID',
  'DISNY',
  'DOTHM',
  'DOTDA',
  'DRAFT',
  'DV360',
  'ENTNT',
  'ENTRE',
  'ESPNN',
  'FACEB',
  'FACTL',
  'FLIPB',
  'FMGNT',
  'FOODN',
  'FORBE',
  'FOURS',
  'FOXNT',
  'FOXHU',
  'FOXSP',
  'FREEF',
  'FRIBE',
  'FUBOT',
  'FUNDI',
  'FXNTW',
  'GASBD',
  'GIMLE',
  'GIPHY',
  'GMAME',
  'GUMGU',
  'HEARS',
  'HGTVN',
  'HISTO',
  'HMTSP',
  'HULUT',
  'HPBAE',
  'HPBST',
  'IFCNT',
  'IGNNT',
  'IHEAR',
  'INSTY',
  'INFAT',
  'INMKT',
  'INVER',
  'JUNGR',
  'KARGO',
  'KATZD',
  'LIFET',
  'LIVEN',
  'LCLTN',
  'LOGON',
  'MASHA',
  'MDSTK',
  'MEDRA',
  'MENSJ',
  'MERED',
  'MLBNT',
  'MLSNT',
  'MTVNT',
  'MUNCH',
  'NASCA',
  'NATIV',
  'NBCNT',
  'NBCSP',
  'NBCUW',
  'NBCUN',
  'NESNT',
  'NEWSA',
  'NHLNT',
  'NHOUS',
  'NPRNT',
  'NTWRK',
  'NYTIM',
  'OATHN',
  'OUTTV',
  'OXYGE',
  'PANDO',
  'PEACK',
  'PERFO',
  'PINTE',
  'PLUTO',
  'PMCNT',
  'POPSU',
  'PRIDE',
  'PRXNT',
  'PushS',
  'RDDIT',
  'REF29',
  'RUNWD',
  'SAMBA',
  'SAVEU',
  'SHARE',
  'SHEKN',
  'SLATE',
  'SLING',
  'SNAPC',
  'SPRTI',
  'SPOTI',
  'TARGE',
  'TASTM',
  'TASTY',
  'TBSNT',
  'TEADS',
  'TELAR',
  'TELMU',
  'THEMA',
  'ONION',
  'PLYTR',
  'SCORE',
  'TRADE',
  'THEAT',
  'THRIL',
  'TINDE',
  'TLCNT',
  'TNTNT',
  'TORRE',
  'TRIPA',
  'TRIPL',
  'TRUTV',
  'TUBIN',
  'TURNE',
  'TWITC',
  'TWITT',
  'UNDER',
  'UNITR',
  'UNIVI',
  'UNRUL',
  'UPROX',
  'USANT',
  'USATO',
  'VEVON',
  'VH1NT',
  'VIACO',
  'VICEN',
  'VINEP',
  'VOXNT',
  'WARNE',
  'WASHI',
  'WBURN',
  'WHLBN',
  'WIRED',
  'XUMON',
  'YAHOO',
  'YAHON',
  'YOUFP',
  'GPYUT',
  'YOUTU',
  'YOURH'],
 'PMPChannel': ['BEA',
  'ENT',
  'FIN',
  'FOO',
  'GAM',
  'HFI',
  'LTX',
  'LIF',
  'MUC',
  'MUS',
  'NEW',
  'OTD',
  'SPO',
  'TRA',
  'NAO'],
 'PrimaryTargeting': ['BHV',
  'CNT',
  'DPT',
  'DEM',
  'GEO',
  'KCT',
  'LAL',
  'MLT',
  'NON',
  'PBT',
  'RTG',
  'SRM'],
 'Unnamed: 9': ['1st Party',
  '2-3P Custom Mix',
  '33 Across ',
  'Bluekai',
  'Custom Acxiom',
  'Custom Factual',
  'Custom GroundTruth',
  'Custom IRI Loyalty Card',
  'Custom Jumpshot',
  'Custom Multiple Sources',
  'Custom Place IQ',
  'Custom Semasio',
  'Facebook - Actions LALs',
  'Facebook - Demo Only',
  'Facebook - Detailed/Interests',
  'Facebook - Geo',
  'Facebook - Multiple',
  'Facebook Engagement Retargeting',
  'Factual',
  'Gas Buddy',
  'Google - 1st Party LALs',
  'Google - Categories',
  'Google - Demo only',
  'Google - Geo',
  'Google - In Market',
  'Google - Life Events',
  'Google - Mix',
  'Google - Spanish Language Browsers',
  'Google - YouTube Engagement Retargeting',
  'Google - YouTube Keyword',
  'Google Affinity  - Interests',
  'Google Affinity - Custom',
  'HULU',
  "Hulu's 1P Data",
  'InMarket',
  'IRI Off The Shelf Verified',
  'IRI Proscores - off the shelf',
  'Jun Group',
  'Lotame',
  'News America',
  'No Audience Data',
  'Pandora',
  'Pinterest - Actions LALs',
  'Pinterest - Engagement Retargeting',
  'Pinterest - Interest',
  'Pinterest - Keyword',
  'PushSpring',
  'Reddit Community',
  'Reddit Demo',
  'Reddit Interest',
  'SAMBA',
  'Snapchat  - Interest',
  'Snapchat - Demo only',
  'Snapchat Engagement Retargeting',
  'Snapchat Geotargeting',
  'Spotify',
  'Twitter - Actions LALs',
  'Twitter - Custom/Multiple',
  'Twitter - Demo only',
  'Twitter - Detailed/Interests',
  'Twitter - Geo only',
  'Twitter - Keywords only',
  'Vinepair',
  'Vizio',
  'VOX'],
 'AudienceSource': ['1PAR',
  '23CM',
  '333A',
  '3BLU',
  'CACX',
  'CFAC',
  'CGRO',
  'IRIL',
  'CJUM',
  'CMIX',
  'CPIQ',
  'CSEM',
  '2FBL',
  '2FBD',
  '2FBI',
  '2FBG',
  '2FBM',
  '2FBR',
  '3FAC',
  '2GBY',
  '2GAA',
  '2GCT',
  '2GAD',
  '2GAG',
  '2GAM',
  '2GAL',
  '2GAX',
  '2GSL',
  '2GYE',
  '2GYK',
  '2GAI',
  '2GAC',
  '3HUL',
  '2HUL',
  '2IMK',
  'IRIS',
  '3IRP',
  '2JUN',
  '3LSL',
  '3NAM',
  'NADA',
  '2PAN',
  '2PNL',
  '2PER',
  '2PNI',
  '2PNK',
  '3PSP',
  '2RCO',
  '2RDD',
  '2RIN',
  '3SAB',
  '2SNI',
  '2SND',
  '2SNR',
  '2SNG',
  '2SPO',
  '2TWL',
  '2TWM',
  '2TWD',
  '2TWI',
  '2TWG',
  '2TWK',
  '2VNP',
  '3VIZ',
  '3VOX'],
 'AudienceName': [],
 'CostStructure': ['AADV',
  'CPSC',
  'CCPV',
  'CPVM',
  'CCPI',
  'CCPA',
  'CCPC',
  'CPEA',
  'CCPM',
  'DCPM',
  'FLAT'],
 'AdServing': ['3', '4', 'S'],
 'DCMTags': ['CDCM', 'IDCM', 'YDCM', 'NDCM'],
 'IASTags': ['NVIW', 'YIAS', 'NIAS'],
 'NielsenTags': ['YNLS', 'NNLS'],
 'FlexField': []}

plac = {0: 'MediaChannel',
 1: 'InventoryType',
 2: 'Brand',
 3: 'Environment/Device',
 4: 'MediaFormat',
 5: 'Dimensions/AdSize',
 6: 'Partner',
 7: 'PMPChannel',
 8: 'PrimaryTargeting',
 9: 'AudienceSource',
 10: 'AudienceName',
 11: 'CostStructure',
 12: 'AdServing',
 13: 'DCMTags',
 14: 'IASTags',
 15: 'NielsenTags',
 16: 'FlexField'}


def error_checker(enter):
	enter['Campaign Name_Val']=enter['Campaign Name'].map(errorchecker_campaign)
	enter['Creative Name Name_Val']=enter['Creative Name'].map(errorchecker_creative)
	enter['Dv360_val']=enter['DV360 PMP Line Item'].map(errorchecker_dv3)
	enter['Placement_val']=enter['Placement Name'].map(errorchecker_placement)
	return(enter)

from flask import Flask, render_template,request,send_from_directory
import os
import pandas as pd

app = Flask(__name__)


@app.route('/', methods = ['POST','GET'])

def index():
    if request.method=='GET':
        return 'render_template("form.html")'
    
    elif request.method=='POST':
        data=request.files['filename']
        data.save('./Archivo de prueba.csv')
        df=pd.read_csv('./Archivo de prueba.csv')
        aux=error_checker(df)
        aux.to_csv('./Archivo de prueba tratado.csv')
        return send_from_directory(directory='./', filename='Archivo de prueba tratado.csv')


if __name__ =="__main__":
	app.run('0.0.0.0',port=80,debug=True)